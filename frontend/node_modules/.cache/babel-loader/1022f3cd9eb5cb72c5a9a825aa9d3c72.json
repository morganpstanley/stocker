{"ast":null,"code":"var _jsxFileName = \"/Users/Morgan/Development/stocker/frontend/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport reduxWebsocket from 'react-redux-websocket';\nimport { Provider } from \"react-redux\";\nimport rootReducer from \"./reducers/rootReducer\";\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from \"redux-thunk\";\nconst socket = new WebSocket(\"wss://ws.finnhub.io?token=bqfppqvrh5r9oe99locg\");\n\nconst sendSubscribeRequest = store => next => action => {\n  if (action.stocks && socket.readyState === 1) {\n    const message = JSON.stringify({\n      type: \"subscribe\",\n      symbol: action.stocks.ts\n    });\n    socket.send(message);\n  }\n\n  next(action);\n};\n\nsocket.onopen = () => {\n  store.getState().stocksReducer.stocks.forEach(stock => {\n    const message = JSON.stringify({\n      type: \"subscribe\",\n      symbol: stock.ts\n    });\n    socket.send(message);\n  });\n};\n\nconst store = createStore(rootReducer, applyMiddleware(reduxWebsocket(socket), thunk, sendSubscribeRequest));\n\nsocket.onmessage = event => {\n  // console.log('SOCKET MESSAGE: ', event)\n  let stock = JSON.parse(event.data);\n\n  if (stock.data !== undefined) {\n    store.dispatch({\n      type: 'ADJUST_PRICE',\n      stock: stock.data[0].s,\n      price: stock.data[0].p\n    });\n  }\n};\n\nReactDOM.render( /*#__PURE__*/React.createElement(Provider, {\n  store: store,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(App, {\n  socket: socket,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 15\n  }\n})), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/Morgan/Development/stocker/frontend/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","reduxWebsocket","Provider","rootReducer","createStore","applyMiddleware","thunk","socket","WebSocket","sendSubscribeRequest","store","next","action","stocks","readyState","message","JSON","stringify","type","symbol","ts","send","onopen","getState","stocksReducer","forEach","stock","onmessage","event","parse","data","undefined","dispatch","s","price","p","render","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AAEA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,MAAMC,MAAM,GAAG,IAAIC,SAAJ,CAAc,gDAAd,CAAf;;AAEA,MAAOC,oBAAoB,GAAGC,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AACvD,MAAIA,MAAM,CAACC,MAAP,IAAiBN,MAAM,CAACO,UAAP,KAAsB,CAA3C,EAA8C;AAC5C,UAAMC,OAAO,GAAGC,IAAI,CAACC,SAAL,CAAe;AAACC,MAAAA,IAAI,EAAC,WAAN;AAAmBC,MAAAA,MAAM,EAAEP,MAAM,CAACC,MAAP,CAAcO;AAAzC,KAAf,CAAhB;AACAb,IAAAA,MAAM,CAACc,IAAP,CAAYN,OAAZ;AACD;;AACDJ,EAAAA,IAAI,CAACC,MAAD,CAAJ;AACD,CAND;;AAQAL,MAAM,CAACe,MAAP,GAAgB,MAAM;AACpBZ,EAAAA,KAAK,CAACa,QAAN,GAAiBC,aAAjB,CAA+BX,MAA/B,CAAsCY,OAAtC,CAA8CC,KAAK,IAAI;AACrD,UAAMX,OAAO,GAAGC,IAAI,CAACC,SAAL,CAAe;AAACC,MAAAA,IAAI,EAAC,WAAN;AAAmBC,MAAAA,MAAM,EAAEO,KAAK,CAACN;AAAjC,KAAf,CAAhB;AACAb,IAAAA,MAAM,CAACc,IAAP,CAAYN,OAAZ;AACD,GAHD;AAID,CALD;;AAOA,MAAML,KAAK,GAAGN,WAAW,CAACD,WAAD,EAAcE,eAAe,CAACJ,cAAc,CAACM,MAAD,CAAf,EAAyBD,KAAzB,EAAgCG,oBAAhC,CAA7B,CAAzB;;AAEAF,MAAM,CAACoB,SAAP,GAAmBC,KAAK,IAAI;AAC1B;AAEA,MAAIF,KAAK,GAAGV,IAAI,CAACa,KAAL,CAAWD,KAAK,CAACE,IAAjB,CAAZ;;AACA,MAAIJ,KAAK,CAACI,IAAN,KAAeC,SAAnB,EAA8B;AAC5BrB,IAAAA,KAAK,CAACsB,QAAN,CAAe;AAACd,MAAAA,IAAI,EAAE,cAAP;AAAuBQ,MAAAA,KAAK,EAAEA,KAAK,CAACI,IAAN,CAAW,CAAX,EAAcG,CAA5C;AAA+CC,MAAAA,KAAK,EAAER,KAAK,CAACI,IAAN,CAAW,CAAX,EAAcK;AAApE,KAAf;AACD;AACF,CAPD;;AASArC,QAAQ,CAACsC,MAAT,eAEI,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAE1B,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACU,oBAAC,GAAD;AAAK,EAAA,MAAM,EAAEH,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADV,CAFJ,EAKE8B,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CALF,E,CAQA;AACA;AACA;;AACAtC,aAAa,CAACuC,UAAd","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport reduxWebsocket from 'react-redux-websocket';\n \nimport { Provider } from \"react-redux\";\nimport rootReducer from \"./reducers/rootReducer\";\nimport { createStore, applyMiddleware } from 'redux'\nimport thunk from \"redux-thunk\";\n\nconst socket = new WebSocket(\"wss://ws.finnhub.io?token=bqfppqvrh5r9oe99locg\");\n\nconst  sendSubscribeRequest = store => next => action => {\n  if (action.stocks && socket.readyState === 1) {\n    const message = JSON.stringify({type:\"subscribe\", symbol: action.stocks.ts})\n    socket.send(message)\n  }\n  next(action)\n}\n\nsocket.onopen = () => {\n  store.getState().stocksReducer.stocks.forEach(stock => {\n    const message = JSON.stringify({type:\"subscribe\", symbol: stock.ts})\n    socket.send(message)\n  })\n}\n\nconst store = createStore(rootReducer, applyMiddleware(reduxWebsocket(socket), thunk, sendSubscribeRequest))\n\nsocket.onmessage = event => {\n  // console.log('SOCKET MESSAGE: ', event)\n\n  let stock = JSON.parse(event.data)\n  if (stock.data !== undefined) {  \n    store.dispatch({type: 'ADJUST_PRICE', stock: stock.data[0].s, price: stock.data[0].p})\n  }\n}\n\nReactDOM.render(\n  \n    <Provider store={store}>\n              <App socket={socket} />\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}